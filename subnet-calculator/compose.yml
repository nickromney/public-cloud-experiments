# Compose configuration for Subnet Calculator - All Services
# Works with both podman-compose and docker compose
#
# Services:
#   - api-fastapi-azure-function: Azure Function backend (FastAPI via AsgiMiddleware)
#   - api-fastapi-container-app: Container App backend (FastAPI on Uvicorn)
#   - frontend-python-flask: Flask frontend (connects to Azure Function backend)
#   - frontend-html-static: Static HTML frontend (connects to Container App backend)
#   - frontend-python-flask-container-app: Flask frontend (connects to Container App backend)
#   - frontend-typescript-vite: TypeScript + Vite SPA (connects to Container App backend)
#
# Usage:
#   podman-compose up                           # Start all services
#   podman-compose up api-fastapi-azure-function frontend-python-flask              # Stack 1
#   podman-compose up api-fastapi-container-app frontend-html-static                # Stack 2
#   podman-compose up api-fastapi-container-app frontend-python-flask-container-app # Stack 3
#   podman-compose up api-fastapi-container-app frontend-typescript-vite            # Stack 4
#
# Access:
#   Stack 1 - Flask + Azure Function:
#     - Flask Frontend: http://localhost:8000
#     - API docs: http://localhost:8080/api/v1/docs
#   Stack 2 - Static HTML + Container App:
#     - Static Frontend: http://localhost:8001
#     - API docs: http://localhost:8090/api/v1/docs
#   Stack 3 - Flask + Container App:
#     - Flask Frontend: http://localhost:8002
#     - API docs: http://localhost:8090/api/v1/docs
#   Stack 4 - TypeScript Vite + Container App:
#     - Vite SPA: http://localhost:3000
#     - API docs: http://localhost:8090/api/v1/docs
services:
  api-fastapi-azure-function:
    build:
      context: ./api-fastapi-azure-function
      dockerfile: Dockerfile
    platform: linux/amd64
    image: subnet-calculator-api-fastapi-azure-function:latest
    init: true
    ports:
      - "8080:80"
    environment:
      # JWT Authentication with Argon2 hashed passwords
      - AUTH_METHOD=jwt
      - JWT_SECRET_KEY=docker-compose-dev-secret-key-min-32-chars-long-12345
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      # Argon2 hashed passwords: demo=password123, admin=securepass
      - JWT_TEST_USERS={"demo":"$$argon2id$$v=19$$m=65536,t=3,p=4$$TklhcmEkyMzqJaH3KHQQDA$$rgp8AmtaR6PzBgjyZGNsivb2yJRqULRt5B+BmzUnzbo","admin":"$$argon2id$$v=19$$m=65536,t=3,p=4$$JiTJZlTwD/1jJLlMQMOwCA$$HbubnE11kzEfcszqKtMOmjvxj14vjooqbdZtgc1NYCs"}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend-python-flask:
    build:
      context: ./frontend-python-flask
      dockerfile: Dockerfile
    image: subnet-calculator-frontend-python-flask:latest
    ports:
      - "8000:8000"
    environment:
      - API_BASE_URL=http://api-fastapi-azure-function:80/api/v1
      # JWT Authentication credentials
      - JWT_USERNAME=demo
      - JWT_PASSWORD=password123
    depends_on:
      api-fastapi-azure-function:
        condition: service_healthy

  api-fastapi-container-app:
    build:
      context: ./api-fastapi-container-app
      dockerfile: Dockerfile
    platform: linux/amd64
    image: subnet-calculator-api-fastapi-container-app:latest
    ports:
      - "8090:8000"
    environment:
      # No authentication for local development (static frontend doesn't implement JWT)
      # For JWT auth testing, use the standalone api-fastapi-container-app/compose.yml
      - AUTH_METHOD=none
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v1/health')"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  frontend-html-static:
    build:
      context: ./frontend-html-static
      dockerfile: Dockerfile
    image: subnet-calculator-frontend-html-static:latest
    ports:
      - "8001:80"
    depends_on:
      api-fastapi-container-app:
        condition: service_healthy

  frontend-python-flask-container-app:
    build:
      context: ./frontend-python-flask
      dockerfile: Dockerfile
    image: subnet-calculator-frontend-python-flask:latest
    ports:
      - "8002:8000"
    environment:
      # Connect to Container App API (no JWT auth in compose)
      - API_BASE_URL=http://api-fastapi-container-app:8000/api/v1
      - STACK_NAME=Python Flask + Container App
    depends_on:
      api-fastapi-container-app:
        condition: service_healthy

  frontend-typescript-vite:
    build:
      context: ./frontend-typescript-vite
      dockerfile: Dockerfile
    platform: linux/amd64
    image: subnet-calculator-frontend-typescript-vite:latest
    ports:
      - "3000:80"
    depends_on:
      api-fastapi-container-app:
        condition: service_healthy
